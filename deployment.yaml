apiVersion: v1 
kind: Service 
metadata:
  name: gowebapp 
  labels:
    run: gowebapp
    tier: frontend 
spec:
  type: LoadBalancer
  ports:
  - port: 80 
  selector:
    run: gowebapp
    tier: frontend1
---
apiVersion: apps/v1 
kind: Deployment 
metadata:
   name: gowebapp
   labels:
     run: gowebapp
     tier: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      run: gowebapp
      tier: frontend
  template: 
    metadata:
      labels:
        run: gowebapp
        tier: frontend 
    spec:
      containers:
      - name: gowebapp
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: purestorage
        image: jowings/gowebapp:${BUILD_NUMBER}
        ports:
        - containerPort: 80
---
apiVersion: v1 
kind: Service
metadata:
  name: gowebapp-mysql
  labels:
    run: gowebapp-mysql
    tier: backend 
spec:
  type: ClusterIP
  ports:
  - port: 3306
    targetPort: 3306 
  selector:
    run: gowebapp-mysql
    tier: backend
---
apiVersion: apps/v1 
kind: Deployment 
metadata:
  name: gowebapp-mysql 
  labels:
    run: gowebapp-mysql
    tier: backend 
spec:
  replicas: 1 
  strategy:
    type: Recreate 
  selector:
    matchLabels:
      run: gowebapp-mysql 
      tier: backend
  template: 
    metadata: 
      labels:
        run: gowebapp-mysql
        tier: backend 
    spec:
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: mysql-claim
      containers:
      - name: gowebapp-mysql 
        env:
        - name: MYSQL_ROOT_PASSWORD 
          value: purestorage
        image: jowings/gowebapp-mysql:${BUILD_NUMBER}
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: data
          mountPath: "/var/lib/mysql"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-claim
spec:
  storageClassName: pure-block
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 200Gi